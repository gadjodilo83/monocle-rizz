import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useState, useEffect } from "react";
import { ensureConnected } from "@/utils/bluetooth/js/main";
import { replRawMode, replSend } from "@/utils/bluetooth/js/repl";
import { Button } from "antd";
import { useWhisper } from "@chengsokdara/use-whisper";
import { app } from "@/utils/app";
import { execMonocle } from "@/utils/comms";

const inter = Inter({ subsets: ["latin"] });

const Home = () => {
  const [connected, setConnected] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [apiKey, setApiKey] = useState(process.env.NEXT_PUBLIC_OPENAI_API_TOKEN);
  const [chatGptResponse, setChatGptResponse] = useState("");
  const [typingIndex, setTypingIndex] = useState(0);

  const { startRecording, stopRecording, transcript } = useWhisper({
    apiKey: apiKey,
    streaming: true,
    timeSlice: 500,
    whisperConfig: {
      language: "de",
    },
  });

  const fetchGpt = async () => {
    const userPrompt = window.transcript;
    const systemPrompt = `

      Du bist ein Sprachübersetzer und übersetzt jeden Input direkt ins Deutsche und ins Italienische. 
      Du machst auch Vorschläge, um auf Fragen zu antworten oder das Gespräch weiterzuführen, jeweils auf Deutsch und Italienisch.

    `;
    const response = await fetch(`https://api.openai.com/v1/engines/davinci-codex/completions`, {
      body: JSON.stringify({
        prompt:
          systemPrompt +
          "\ntranscript: " +
          userPrompt +
          "\nÜbersetzung auf Deutsch und Italienisch: ",
        temperature: 0.7,
        max_tokens: 512,
        frequency_penalty: 0,
        presence_penalty: 0,
        n: 1,
      }),
      headers: {
        Authorization: `Bearer ${process.env.NEXT_PUBLIC_OPENAI_API_TOKEN}`,
        "Content-Type": "application/json",
      },
      method: "POST",
    });

    const resJson = await response.json();
    const res = resJson?.choices?.[0]?.text;
    if (!res) return;
    setChatGptResponse(res);
    await displayRawRizz(res);
  };

  useEffect(() => {
    const typingTimer = setInterval(() => {
      if (typingIndex < chatGptResponse.length) {
        setTypingIndex(typingIndex + 1);
      }
    }, 50);

    return () => clearInterval(typingTimer);
  }, [chatGptResponse, typingIndex]);

  useEffect(() => {
    // Sync the window variable and the transcript
    window.transcript = transcript.text;
  }, [transcript.text]);

  const connect = async () => {
    await ensureConnected(logger, relayCallback);
    app.run(execMonocle);
  };

  const onRecord = () => {
    isRecording ? stopRecording() : startRecording();
    setIsRecording(!isRecording);
  };

  async function displayRawRizz(rizz) {
    await replRawMode(true);
    await displayRizz(rizz);
  }

  async function displayRizz(rizz) {
    if (!rizz) return;
    const splitText = wrapText(rizz);
    let replCmd = "import display;";

    for (let i = 0; i < splitText.length; i++) {
      replCmd += `display.text("${splitText[i]}", 0, ${i * 50}, 0xffffff);`;
    }

    replCmd += "display.show();";

    console.log("**** replCmd ****", replCmd);

    await replSend(replCmd);
  }

  function wrapText(inputText) {
    const block = 30;
    let text = [];
    for (let i = 0; i < 6; i++) {
      text.push(
        inputText.substring(block * i, block * (i + 1)).replace("\n", "")
      );
    }

    return text;
  }

  function logger(msg) {
    if (msg === "Connected") {
      setConnected(true);
    }
  }

  function relayCallback(msg) {
    if (!msg) {
      return;
    }
    if (msg.trim() === "trigger b") {
      // Left btn
      // fetchGpt();
    }

    if (msg.trim() === "trigger a") {
      // Right btn
      // onRecord();
    }
  }

  return (
    <>
      <Head>
        <title>Monocle-Translator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${inter.className} ${styles.main}`}>
        <div className="flex w-screen h-screen flex-col items-center justify-center">
          <p className="text-3xl">{connected ? "Connected" : "Disconnected"}</p>
          {transcript.text}
          <input
            type="text"
            value={apiKey}
            onChange={(e) => setApiKey(e.target.value)}
            placeholder="Enter API Key"
            style={{ marginBottom: "10px" }}
          />
          <Button
            type="primary"
            onClick={connect}
            style={{ marginTop: "10px" }}
          >
            Connect
          </Button>
          <div className="flex items-center mt-5 gap-2">
            <Button onClick={onRecord}>
              {isRecording ? "Stop recording" : "Start recording"}
            </Button>
            <Button onClick={fetchGpt}>Get response</Button>
          </div>
          <div>
            <label>
              ChatGPT:
              <textarea
                style={{ width: "800px", height: "200px" }}
                value={chatGptResponse.substring(0, typingIndex)}
                readOnly
              />
            </label>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
